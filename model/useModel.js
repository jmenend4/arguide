import{useState,useEffect,useRef}from"react";import{useAsyncError}from"../../../hooks/asyncError";import*as tf from"@tensorflow/tfjs";import testImgSrc from"../../../assets/Archivo_043.jpeg";import{useDemoVideo}from"../demoFrames";export const useModel=()=>{const e=useRef(null),[t,r]=useDemoVideo(),s=useAsyncError(),[o,n]=useState(null);useEffect((()=>(null===e.current&&r&&tf.ready().then((()=>{console.log("Using backend: "+tf.getBackend()),c()})).catch((e=>{s(e)})),()=>{})),[r]);const c=()=>{tf.loadGraphModel("./model/model.json").then((t=>{const r=new Image;r.src=testImgSrc,r.onload=()=>{tf.tidy((()=>{const e=tf.browser.fromPixels(r);t.execute(e),a(t)})),e.current=t}})).catch((e=>{s(e)}))},a=async e=>{const t=await l(e,1);console.log("Detections per second = "+t),n(t)},f=useRef([]),u=useRef([]),l=async(e,r)=>{console.log("Running test without NMS but with top of class");let s=0,o=0;for(let n=0;n<r;n++)for(let r=0;r<t.current.length;r++){const n=new Date,c=[[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1]],[a,l,i]=tf.tidy((()=>{const s=tf.browser.fromPixels(t.current[r]),o=e.execute(s),n=tf.reshape(o[0],[-1,4]),c=tf.reshape(o[3],[-1]),a=tf.reshape(o[1],[-1]),f=o[2],u=c.greater(tf.tensor1d([.8]));return[h(n,u).mul(f),h(c,u),h(a,u)]})),p=i.arraySync(),d=a.arraySync(),m=l.arraySync();p.forEach(((e,t)=>{m[t]>c[e][4]&&(c[e]=[d[t][0],d[t][1],d[t][2],d[t][3],m[t]])})),i.dispose(),a.dispose(),l.dispose(),s+=new Date-n,o++,c[0][4]>0&&f.current.push(c[0][4]),c[1][4]>0&&u.current.push(c[1][4])}return console.log("class 0 score mean: "+f.current.reduce(((e,t)=>e+t))/f.current.length),console.log("class 1 score mean: "+u.current.reduce(((e,t)=>e+t))/u.current.length),1/(s/(1e3*o))},h=(e,t)=>{const r=t.rank,s=e.shape;let o=1;for(let e=0;e<0+r;e++)o*=s[e];const n=s.slice(0,0).concat([o],s.slice(0+r)),c=tf.reshape(e,n),a=tf.reshape(t,[-1]),f=i(a),u=tf.squeeze(f,[1]);return tf.gather(c,u,0)},i=e=>{const t=e.dataSync();return p(e.shape,t)},p=(e,t)=>{const r=[];for(let e=0;e<t.length;e++)t[e]&&r.push(e);const s=tf.buffer(e,"int32"),o=tf.buffer([r.length,e.length],"int32");for(let t=0;t<r.length;t++){const n=s.indexToLoc(r[t]),c=t*e.length;o.values.set(n,c)}return o.toTensor()};return[o,t=>{const r=[[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1]],[s,o,n]=tf.tidy((()=>{const r=e.current.execute(t),s=tf.reshape(r[0],[-1,4]),o=tf.reshape(r[3],[-1]),n=tf.reshape(r[1],[-1]),c=r[2],a=o.greater(tf.tensor1d([.8]));return[h(s,a).mul(c),h(o,a),h(n,a)]})),c=n.arraySync(),a=s.arraySync(),f=o.arraySync();return c.forEach(((e,t)=>{f[t]>r[e][4]&&(r[e]=[a[t][0],a[t][1],a[t][2],a[t][3],f[t]])})),n.dispose(),s.dispose(),o.dispose(),r}]};